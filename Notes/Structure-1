# StyleGen: AI Image Generation Website

## Project Overview

We've created a modern web application called StyleGen that allows users to generate images in different artistic styles. The site is inspired by the UI/UX of Rabbithole.chat but repurposed for AI image generation instead of question answering.

## Technology Stack

- **Framework**: Next.js 15 with App Router
- **UI**: React with Tailwind CSS
- **Language**: TypeScript
- **Images**: Next.js Image component for optimization

## Key Files and Their Roles

### Core Structure

- **`src/app/layout.tsx`**: The root layout component that wraps all pages. It includes:
  - Metadata configuration (title, description)
  - Font setup (Inter font)
  - Base HTML structure

- **`src/app/globals.css`**: Global styles including:
  - Tailwind directives
  - Custom CSS variables (like `--c-grayA3` for border colors)
  - Utility classes (like scrollbar hiding)

- **`next.config.mjs`**: Next.js configuration:
  - Image optimization settings
  - Development configurations
  - Build optimizations

- **`tailwind.config.ts`**: Tailwind CSS configuration:
  - Theme customization
  - Content paths
  - Extensions

### Page Components

- **`src/app/page.tsx`**: The main homepage with:
  - Search input for image generation prompts
  - Image stack display with rotated cards
  - Sidebar menu for history
  - Hidden carousel for transitions

- **`src/app/pricing/page.tsx`**: The pricing page showing:
  - Free tier options (5 generations/day)
  - Pro tier options (unlimited generations)
  - Feature comparisons

- **`src/app/signin/page.tsx`**: User authentication page with:
  - Google sign-in option
  - Terms and policy references

- **`src/app/terms/page.tsx`** & **`src/app/privacy/page.tsx`**: Legal pages for terms of service and privacy policy.

## Key Features

1. **Interactive UI**: The homepage features a stack of rotated image cards that showcase different artistic styles (Dali, Disney, Ghibli, etc.).

2. **Search Input**: A prominent search bar allows users to describe the image they want to generate.

3. **Responsive Design**: The UI adapts to different screen sizes using Tailwind's responsive classes.

4. **Optimized Images**: All images use Next.js Image component for automatic optimization.

5. **Animation-Ready**: The code includes transition classes for future animations.

## How Components Link Together

1. **Layout Hierarchy**:
   - `layout.tsx` (root) → `page.tsx` (home), `pricing/page.tsx`, etc.
   - Each page shares the same global styling but has unique content

2. **Navigation Flow**:
   - Home → Pricing/Sign In through header buttons
   - Terms/Privacy access through Sign In page links

3. **Image Implementation**:
   - Images are stored in `/public/images/` 
   - Referenced in components with paths like `/images/Dali.png`
   - Displayed using Next.js `<Image>` component with proper dimensions

## Challenges Addressed

1. **Image Display**: We adjusted image display for portrait-oriented images:
   - Changed from `object-top` to `object-[center_top_-15px]` for better framing
   - Increased card heights from 300px to 350px
   - Moved cards up by changing `-bottom-32` to `-bottom-16`

2. **Dependency Issues**: Fixed issues with the Tailwind typography plugin by removing dependencies.

3. **File Path Case Sensitivity**: Corrected image paths to match the actual case of files:
   - Changed from `.jpg` to `.png` extensions
   - Fixed capitalization (e.g., `logo.png` → `Logo.png`)

4. **Content Balance**: Adjusted vertical positioning to balance the UI:
   - Added `-mt-16` to the main search area
   - Reduced spacing between elements for better composition


## How to Modify the Project

1. **Change Images**: Replace files in `/public/images/` directory, ensuring names match the references in the code.

2. **Modify Styles**: Edit `globals.css` for global styles or use Tailwind classes directly in components.

3. **Add New Pages**: Create new files in the `src/app/` directory following the naming pattern (e.g., `about/page.tsx`).

4. **Change Text/Content**: Edit the relevant page files to update text content.

5. **Adjust UI Positioning**: Modify the positioning classes (e.g., `-bottom-16`, `-mt-16`) to change layout spacing.

## Future Enhancement Possibilities

1. **Backend Integration**: Add actual image generation API calls to Replicate or other AI services.

2. **Authentication**: Implement the Firebase authentication that's already configured in the template.

3. **History Feature**: Enable the sidebar to actually show generation history.

4. **Animation Improvements**: Add more sophisticated animations using the transition classes already in place.

5. **Mobile Responsiveness**: Enhance the mobile experience with additional responsive design.

## Summary

This project is a sleek, modern web interface for AI image generation that closely mimics the aesthetics of Rabbithole.chat while serving a completely different purpose. It's built with Next.js and React, using modern TypeScript patterns and Tailwind for styling. The core functionality is currently UI-only, ready to be connected to backend image generation services.

The primary goal is to allow users to upload their own images, select a predefined style (Dali, Disney, Ghibli, etc.) or define a custom style, and then download the transformed image. This requires both frontend components for user interaction and backend services for image processing and storage.
